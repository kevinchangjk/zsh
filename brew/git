#! /bin/zsh

alias gs="git number" # git status
alias ga="git number add"
alias gaa="git add --all"
alias gco="git number checkout"
alias gb="git branch"

alias gd="git number diff"
alias gds="git number diff --staged"
alias giti="$VIM .gitignore"
alias gr="git number reset"
alias gitm="$VIM .gitmodules"
alias gp="git number -c $VIM" # git preview
alias gcan="git commit --amend --no-edit"

alias gap="git number add -p"
alias gms="git merge --squash" # squash diff into one commit

alias gu="git fetch && git number status" # git update
alias gc="git commit"
alias gau="git add -u"
alias ga.="git add ."

function gl() {
  [ "$1" ] && len=$1 || len=20
  git log --oneline --graph -n $len
}

function gcm() {
  if [ "$1" ]; then
    git commit -m $1
  else
    git commit
  fi
}

function gca() {
  if [ "$1" ]; then
    git commit --amend -m $1
  else
    git commit --amend
  fi
}

function ags() {
  MAX_LEN=20
  BLACKLIST=()
  CURRENT=$(pwd)
  for d in $REPOS/*/; do
    cd $d
    [ ! -d .git ] && continue # skip if not a git repo
    REPO_NAME=$(pwd | awk -F/ '{print $NF}')
    STR_LEN=${#REPO_NAME}
    [[ ${BLACKLIST[(r)$REPO_NAME]} == $REPO_NAME ]] && continue # if in BLACKLIST, continue

    STATUS=$(git status -s)
    COMMITS=()

    while IFS= read -r line; do
      COMMITS+=( "$line" )
    done < <( git cherry -v --abbrev 2> /dev/null )

    # uncommitted changes
    if [ "$STATUS" ]; then
      echo $CYAN$(pwd | awk -F/ '{print $NF}')$NORMAL
      echo $STATUS

    # unpushed commits
    elif [ "$COMMITS[1]" ]; then
      echo $CYAN$(pwd | awk -F/ '{print $NF}')$NORMAL
      for i in $COMMITS[@]; do
        pre=$(echo $i | cut -d ' ' -f1)
        commit=$YELLOW$(echo $i | cut -d ' ' -f2)$NORMAL
        post=$(echo $i | cut -d ' ' -f3-)
        echo $pre $commit $post
      done

    # print ok message
    else
      SPACES=$(printf ' %.0s' {1..$(echo $(( MAX_LEN - STR_LEN )))})
      echo $CYAN$(pwd | awk -F/ '{print $NF}')$SPACES${GREEN}"[ok]"
    fi
  done
  cd $CURRENT
  return true
}

# delete branch {{{
# git branch -d <branch_name>
# }}}
# delete remote branch {{{
# git push origin -d <branch_name>
# }}}

# to remove a submodule completely:
# 0. mv a/submodule a/submodule_tmp
# 1. git submodule deinit -f -- a/submodule    
# 2. rm -rf .git/modules/a/submodule
# 3. git rm -f a/submodule
# Note: a/submodule (no trailing slash)
 
# or, if you want to leave it in your working tree and have done step 0
# 3.   git rm --cached a/submodule
# 3b.  mv a/submodule_tmp a/submodule
